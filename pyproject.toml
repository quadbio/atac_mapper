[build-system]
build-backend = "setuptools.build_meta"
requires = [ "setuptools>=64", "wheel" ]

[project]
name = "atac-mapper"
version = "0.0.1"
description = "Map query scATAC-seq data to a single-cell chromatin accessibility atlas"
readme = "README.md"
license = { file = "LICENSE" }
maintainers = [
  { name = "Nadezhda Azbukina", email = "nazbukina@ethz.ch" },
]
authors = [
  { name = "Nadezhda Azbukina" },
]
requires-python = ">=3.9"
classifiers = [
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dependencies = [
  "anndata>=0.9",
  "cellmapper>=0.1",
  "cloudpickle>=2.2",
  "joblib>=1.3",
  "numpy>=1.24",
  "pandas>=2",
  "scanpy>=1.11",
  "scarches>=0.5",
  "scipy>=1.11",
  "scvi-tools>=1",
  "torch>=2",
]

optional-dependencies.dev = [
  "pre-commit",
  "pytest>=7",
  "pytest-cov",
]
optional-dependencies.test = [
  "pytest>=7",
  "pytest-cov",
]

[tool.setuptools]
package-dir = { "" = "src" }

[tool.hatch.envs.default]
installer = "uv"
features = [ "dev" ]

[tool.hatch.envs.docs]
features = [ "doc" ]
scripts.build = "sphinx-build -M html docs docs/_build -W {args}"
scripts.open = "python -m webbrowser -t docs/_build/html/index.html"
scripts.clean = "git clean -fdX -- {args:docs}"

# Test the lowest and highest supported Python versions with normal deps
[[tool.hatch.envs.hatch-test.matrix]]
deps = [ "stable" ]
python = [ "3.10", "3.13" ]

# Test the newest supported Python version also with pre-release deps
[[tool.hatch.envs.hatch-test.matrix]]
deps = [ "pre" ]
python = [ "3.13" ]

[tool.hatch.envs.hatch-test]
features = [ "test" ]

[tool.hatch.envs.hatch-test.overrides]
# If the matrix variable `deps` is set to "pre",
# set the environment variable `UV_PRERELEASE` to "allow".
matrix.deps.env-vars = [
  { key = "UV_PRERELEASE", value = "allow", if = [ "pre" ] },
]

[tool.ruff]
line-length = 120
src = [ "src" ]
extend-include = [ "*.ipynb" ]

format.docstring-code-format = true

lint.select = [
  "B",      # flake8-bugbear
  "BLE",    # flake8-blind-except
  "C4",     # flake8-comprehensions
  "D",      # pydocstyle
  "E",      # Error detected by Pycodestyle
  "F",      # Errors detected by Pyflakes
  "I",      # isort
  "RUF100", # Report unused noqa directives
  "TID",    # flake8-tidy-imports
  "UP",     # pyupgrade
  "W",      # Warning detected by Pycodestyle
]
lint.ignore = [
  "B008", # Errors from function calls in argument defaults. These are fine when the result is immutable.
  "D100", # Missing docstring in public module
  "D104", # Missing docstring in public package
  "D105", # __magic__ methods are often self-explanatory, allow missing docstrings
  "D107", # Missing docstring in __init__
  # Disable one in each pair of mutually incompatible rules
  "D203", # We don’t want a blank line before a class docstring
  "D213", # <> We want docstrings to start immediately after the opening triple quote
  "D400", # first line should end with a period [Bug: doesn’t work with single-line docstrings]
  "D401", # First line should be in imperative mood; try rephrasing
  "E501", # line too long -> we accept long comment lines; formatter gets rid of long code lines
  "E731", # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
  "E741", # allow I, O, l as variable names -> I is the identity matrix
]
lint.per-file-ignores."*/__init__.py" = [ "F401" ]
lint.per-file-ignores."docs/*" = [ "I" ]
lint.per-file-ignores."tests/*" = [ "D" ]
lint.pydocstyle.convention = "numpy"

[tool.pytest]
testpaths = [ "tests" ]
python_files = [ "test_*.py" ]
addopts = "--import-mode=importlib"
pythonpath = [
  "src",
]

[tool.pytest.ini_options]
testpaths = [ "tests" ]
xfail_strict = true
addopts = [
  "--import-mode=importlib", # allow using test files with same name
]

[tool.coverage.run]
source = [ "atac_mapper" ]
omit = [
  "**/test_*.py",
]

[tool.cruft]
skip = [
  "tests",
  "src/**/__init__.py",
  "src/**/basic.py",
  "docs/api.md",
  "docs/changelog.md",
  "docs/references.bib",
  "docs/references.md",
  "docs/notebooks/example.ipynb",
]
